CMAKE_MINIMUM_REQUIRED(VERSION 2.4)

IF (COMMAND cmake_policy)
    cmake_policy(SET CMP0003 NEW)
ENDIF (COMMAND cmake_policy)

PROJECT(OpenTESArena)

set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/")

# Configure for GNU Compiler
IF (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    SET (CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -std=c++11)

    # To use std::thread and friends, we must pass -lpthread and -pthread to the compiler and Linker for GCC
    IF (NOT WIN32)
        SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pthread")
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
        SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lpthread -pthread")
    ENDIF (NOT WIN32)
ENDIF (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")

FIND_PACKAGE(OpenCL REQUIRED)
FIND_PACKAGE(SDL2 REQUIRED)
FIND_PACKAGE(OpenAL REQUIRED)
FIND_PACKAGE(WildMidi)

SET(EXTERNAL_LIBS ${OPENAL_LIBRARY} ${OpenCL_LIBRARIES} ${SDL2_LIBRARY} ${SDL2_IMAGE_LIBRARY})
INCLUDE_DIRECTORIES ("${CMAKE_SOURCE_DIR}" ${SDL2_INCLUDE_DIR} ${OpenCL_INCLUDE_DIRS} ${OPENAL_INCLUDE_DIR})
IF(WILDMIDI_FOUND)
    SET(EXTERNAL_LIBS ${EXTERNAL_LIBS} ${WILDMIDI_LIBRARIES})
    INCLUDE_DIRECTORIES(${WILDMIDI_INCLUDE_DIRS})
    ADD_DEFINITIONS("-DHAVE_WILDMIDI=1")
ELSE(WILDMIDI_FOUND)
    MESSAGE(STATUS "WildMidi not found, no MIDI support!")
ENDIF(WILDMIDI_FOUND)

FILE(GLOB_RECURSE COMP_VFS_INCLUDES "components/vfs/*.h")
FILE(GLOB_RECURSE COMP_VFS_SOURCES "components/vfs/*.cpp")

FILE(GLOB_RECURSE COMP_ARCHIVES_INCLUDES "components/archives/*.h")
FILE(GLOB_RECURSE COMP_ARCHIVES_SOURCES "components/archives/*.cpp")

IF (WIN32)
    FILE(GLOB_RECURSE COMP_MISC_INCLUDES "components/misc/*.h")
    FILE(GLOB_RECURSE COMP_MISC_SOURCES "components/misc/*.cpp")
ELSE (WIN32)
    SET(COMP_MISC_INCLUDES "")
    SET(COMP_MISC_SOURCES "")
ENDIF (WIN32)
ADD_LIBRARY (components STATIC ${COMP_VFS_INCLUDES} ${COMP_ARCHIVES_INCLUDES} ${COMP_MISC_INCLUDES} ${COMP_VFS_SOURCES} ${COMP_ARCHIVES_SOURCES} ${COMP_MISC_SOURCES})

FILE(GLOB_RECURSE TES_INCLUDES "OpenTESArena/src/*.h")
FILE(GLOB_RECURSE TES_SOURCES "OpenTESArena/src/*.cpp")

ADD_EXECUTABLE (TESArena ${TES_INCLUDES} ${TES_SOURCES})
TARGET_LINK_LIBRARIES(TESArena components ${EXTERNAL_LIBS})
